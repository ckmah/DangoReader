function githubIcon(e){function n(e){var n="";n+=e.avatar_url,document.getElementById("github-icon").innerHTML=n}var t=new XMLHttpRequest,o="https://api.github.com/users/"+e;t.onreadystatechange=function(){if(4==t.readyState&&200==t.status){var e=JSON.parse(t.responseText);n(e)}},t.open("GET",o,!0),t.send()}$(document).ready(function(){$("#phone-screenshot > div:gt(0)").hide(),setInterval(function(){$("#phone-screenshot > div:first").fadeOut(500).next().fadeIn(500).end().appendTo("#phone-screenshot")},4e3)});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdpdGh1Yi1pY29uLmpzIiwic2NyaXB0cy5qcyJdLCJuYW1lcyI6WyJnaXRodWJJY29uIiwidXNlcm5hbWUiLCJnZXRQaWN0dXJlIiwic2l0ZSIsIm91dCIsImF2YXRhcl91cmwiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwieG1saHR0cCIsIlhNTEh0dHBSZXF1ZXN0IiwidXJsIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInVzZXJQYWdlIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0Iiwib3BlbiIsInNlbmQiLCIkIiwicmVhZHkiLCJoaWRlIiwic2V0SW50ZXJ2YWwiLCJmYWRlT3V0IiwibmV4dCIsImZhZGVJbiIsImVuZCIsImFwcGVuZFRvIl0sIm1hcHBpbmdzIjoiQUFBQSxRQUFBQSxZQUFBQyxHQWdCQSxRQUFBQyxHQUFBQyxHQUNBLEdBQUFDLEdBQUEsRUFDQUEsSUFBQUQsRUFBQUUsV0FDQUMsU0FBQUMsZUFBQSxlQUFBQyxVQUFBSixFQWpCQSxHQUFBSyxHQUFBLEdBQUFDLGdCQUNBQyxFQUFBLGdDQUFBVixDQUdBUSxHQUFBRyxtQkFBQSxXQUNBLEdBQUEsR0FBQUgsRUFBQUksWUFBQSxLQUFBSixFQUFBSyxPQUFBLENBQ0EsR0FBQUMsR0FBQUMsS0FBQUMsTUFBQVIsRUFBQVMsYUFDQWhCLEdBQUFhLEtBSUFOLEVBQUFVLEtBQUEsTUFBQVIsR0FBQSxHQUNBRixFQUFBVyxPQ2JBQyxFQUFBZixVQUFBZ0IsTUFBQSxXQUNBRCxFQUFBLGlDQUFBRSxPQUVBQyxZQUFBLFdBQ0FILEVBQUEsaUNBQ0FJLFFBQUEsS0FDQUMsT0FDQUMsT0FBQSxLQUNBQyxNQUNBQyxTQUFBLHNCQUNBIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGdpdGh1Ykljb24odXNlcm5hbWUpIHtcclxuXHQvLyBuZXcgaHR0cCByZXF1ZXN0IHRvIGdpdGh1YiBwYWdlXHJcblx0dmFyIHhtbGh0dHAgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuXHR2YXIgdXJsID0gXCJodHRwczovL2FwaS5naXRodWIuY29tL3VzZXJzL1wiICsgdXNlcm5hbWU7XHJcblxyXG5cdC8vIGNoZWNrcyBmb3IgdmFsaWQgc2l0ZSBiZWZvcmUgcGFyc2luZ1xyXG5cdHhtbGh0dHAub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcblx0ICAgIGlmICh4bWxodHRwLnJlYWR5U3RhdGUgPT0gNCAmJiB4bWxodHRwLnN0YXR1cyA9PSAyMDApIHtcclxuXHQgICAgICAgIHZhciB1c2VyUGFnZSA9IEpTT04ucGFyc2UoeG1saHR0cC5yZXNwb25zZVRleHQpO1xyXG5cdCAgICAgICAgZ2V0UGljdHVyZSh1c2VyUGFnZSk7XHJcblx0ICAgIH1cclxuXHR9O1xyXG5cclxuXHR4bWxodHRwLm9wZW4oXCJHRVRcIiwgdXJsLCB0cnVlKTtcclxuXHR4bWxodHRwLnNlbmQoKTtcclxuXHJcblx0ZnVuY3Rpb24gZ2V0UGljdHVyZShzaXRlKSB7XHJcblx0XHR2YXIgb3V0ID0gXCJcIjtcclxuXHRcdG91dCArPSBzaXRlLmF2YXRhcl91cmw7XHJcblx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImdpdGh1Yi1pY29uXCIpLmlubmVySFRNTCA9IG91dDtcclxuXHR9XHJcbn1cclxuIiwiLy8gc2ltcGxlIHBob25lIHNsaWRlc2hvd1xuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgJChcIiNwaG9uZS1zY3JlZW5zaG90ID4gZGl2Omd0KDApXCIpLmhpZGUoKTtcblxuICAgIHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAkKCcjcGhvbmUtc2NyZWVuc2hvdCA+IGRpdjpmaXJzdCcpXG4gICAgICAgICAgICAuZmFkZU91dCg1MDApXG4gICAgICAgICAgICAubmV4dCgpXG4gICAgICAgICAgICAuZmFkZUluKDUwMClcbiAgICAgICAgICAgIC5lbmQoKVxuICAgICAgICAgICAgLmFwcGVuZFRvKCcjcGhvbmUtc2NyZWVuc2hvdCcpO1xuICAgIH0sIDQwMDApO1xufSk7XG5cblxuLy8gLy8gYXV0b3BsYXkgbmV4dCB2aWRlbyB1c2luZ1xuLy8gZnVuY3Rpb24gbmV4dFZpZGVvKGluZGV4KSB7XG4vLyAgICAgdmFyIG5leHRJbmRleCA9IChpbmRleCArIDEpICUgMztcbi8vICAgICAkKCcjZmVhdHVyZS1idXR0b25zID4gYScpLmVxKG5leHRJbmRleCkuY2xpY2soKTtcbi8vIH1cblxuLy8gLy8gcGxheS9wYXVzZSB0b2dnbGVcbi8vIGZ1bmN0aW9uIHBsYXlUb2dnbGUodmlkZW8pIHtcbi8vICAgICBpZiAodmlkZW8ucGF1c2VkKSB7XG4vLyAgICAgICAgIHZpZGVvLnBsYXkoKTtcbi8vICAgICB9IGVsc2Uge1xuLy8gICAgICAgICB2aWRlby5wYXVzZSgpO1xuLy8gICAgIH1cbi8vIH1cblxuLy8gZnVuY3Rpb24gcmVzZXRWaWRlbyh2aWQpIHtcbi8vICAgICB2aWQuY2xhc3NOYW1lID0gJyc7XG4vLyAgICAgdmlkLmN1cnJlbnRUaW1lID0gMDtcbi8vICAgICB2aWQucGF1c2UoKTtcbi8vIH1cblxuLy8gJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4vLyAgICAgJCgnW2RhdGEtdG9nZ2xlPVwidG9vbHRpcFwiXScpLnRvb2x0aXAoKTtcblxuLy8gICAgIC8vIGluaXQgdmlkZW9zXG4vLyAgICAgJCgnI3ZpZGVvLWNvbnRhaW5lciA+IHZpZGVvJykuZWFjaChmdW5jdGlvbihpbmRleCwgdmlkZW8pIHtcbi8vICAgICAgICAgcmVzZXRWaWRlbyh2aWRlbyk7XG4vLyAgICAgICAgIHZpZGVvLnBhdXNlKCk7XG4vLyAgICAgICAgIHZpZGVvLm9uY2xpY2sgPSBmdW5jdGlvbigpIHtcbi8vICAgICAgICAgICAgIHBsYXlUb2dnbGUodmlkZW8pO1xuLy8gICAgICAgICB9O1xuLy8gICAgICAgICAvLyB2aWRlby5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHBsYXlUb2dnbGUodmlkZW8pKTtcbi8vICAgICAgICAgdmlkZW8ub25lbmRlZCA9IGZ1bmN0aW9uKCkge1xuLy8gICAgICAgICAgICAgbmV4dFZpZGVvKGluZGV4KTtcbi8vICAgICAgICAgfTtcbi8vICAgICB9KTtcblxuLy8gICAgIC8vIGJ1dHRvbiBjbGljayBzd2l0Y2ggdG8gY29ycmVzcG9uZGluZyB2aWRlb1xuLy8gICAgICQoJyNmZWF0dXJlLWJ1dHRvbnMgPiBhJykuY2xpY2soZnVuY3Rpb24oZXZlbnQpIHtcbi8vICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbi8vICAgICAgICAgdmFyIGZlYXR1cmVJbmRleCA9ICQodGhpcykuaW5kZXgoKTtcbi8vICAgICAgICAgJCgnI3ZpZGVvLWNvbnRhaW5lciA+IHZpZGVvJykuZWFjaChmdW5jdGlvbihpbmRleCwgdmlkZW8pIHtcbi8vICAgICAgICAgICAgIGlmIChpbmRleCA9PSBmZWF0dXJlSW5kZXgpIHtcbi8vICAgICAgICAgICAgICAgICB2aWRlby5jbGFzc05hbWUgPSAndmlkZW8tYWN0aXZlJztcbi8vICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhpbmRleCk7XG4vLyAgICAgICAgICAgICAgICAgaWYgKHZpZGVvLnBhdXNlZCkge1xuLy8gICAgICAgICAgICAgICAgICAgICB2aWRlby5wbGF5KCk7XG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgICAgICByZXNldFZpZGVvKHZpZGVvKTtcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgfSk7XG4vLyAgICAgfSk7XG5cbi8vICAgICAvLyBpbml0aWFsIHZpZGVvIHN0YXJ0XG4vLyAgICAgJCgnI2ZlYXR1cmUtYnV0dG9ucyBhJylbMF0uY2xpY2soKTtcblxuXG4vLyB9KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==